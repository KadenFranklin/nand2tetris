// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array open_space;
    static Array NOBLK;
    
  
    static int open_len;
    static int open_next;
    static int ALLOC_SIZE; 
    /** Initializes memory parameters. */
    function void init() {
        let memory = 0;
        let open_space = 2048;
        let NOBLK = 16384; 
        let open_len = 0;
        let open_next = 1;
        let ALLOC_SIZE = -1;
        let open_space[open_len] = 16384-2048;
        let open_space[open_next] = null;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function Array alloc(int size) {
        var Array prev_block;
        var Array found_block;
        
        let prev_block = Memory.best_fit(size);             
        if( prev_block = NOBLK ) {
            let found_block = null;  
        }
        else {
            if( prev_block = null ) {
                let found_block = open_space;                 
                let open_space = Memory.do_alloc(found_block, size); 
            }
            else {
                let found_block = prev_block[open_next];
                let prev_block[open_next] = Memory.do_alloc(found_block, size);
            }
        }
        return found_block+1;
    }
    
    // Find the block with the best fit
    function Array best_fit(int size) {
        var Array best_block;
        var Array prev_block;
        var Array cur_block;
        var int best_size;
        var int cur_size;
        
        let best_block = NOBLK;
        let best_size = 16384 - 2048;
        let cur_block = open_space;
        let prev_block = null;
        
        while( ~(cur_block = null) ) {
            let cur_size = cur_block[open_len]-1;
            if( ~(cur_size < size) & (cur_size < best_size) ) {
                // Found new best block
                let best_block = prev_block;
                let best_size = cur_size;
            }
            let prev_block = cur_block;
            let cur_block = cur_block[open_next];
        }
        return best_block;
    }

    // Allocate the found block and adjust free and alloc block headers
    function Array do_alloc(Array found_block, int size) {
        var Array next_block;
        var int block_size;
        
        if( found_block[open_len] > (size+1+2) ) {
            let next_block = found_block + size+1;
            let next_block[open_next] = found_block[open_next];
            let next_block[open_len] = found_block[open_len] - (next_block - found_block);
            let found_block = found_block + 1; 
            let found_block[ALLOC_SIZE] = size+1;
        }
        else {
            let next_block = found_block[open_next];
            let block_size = found_block[open_len];
            let found_block = found_block + 1;      // Point just after the alloc hdr
            let found_block[ALLOC_SIZE] = block_size;
        }
        return next_block;
    }
    /** De-allocates the given object and frees its space. */
    function void deAlloc(Array object) {
        var int alloc_size;
        var Array prev_block;
        var Array next_block;
        let alloc_size = object[ALLOC_SIZE];
        let object = object - 1;
        let prev_block = Memory.find_prev_free(object);
        
        if( prev_block = null ) {
            let object[open_len] = alloc_size;
            let object[open_next] = open_space;
            let open_space = object;
            let prev_block = object;
        }
        else {
            if( (prev_block + prev_block[open_len]) = object ) {
                // join prev free block with alloc block.
                let prev_block[open_len] = prev_block[open_len] + alloc_size;
            }
            else {
                // link prev free block to alloc block
                let object[open_len] = alloc_size;
                let object[open_next] = prev_block[open_next];
                let prev_block[open_next] = object;
                let prev_block = object;
            }
        }
        if( (prev_block + prev_block[open_len]) = prev_block[open_next] ) {
            // join prev free with next free.
            let next_block = prev_block[open_next];
            let prev_block[open_len] = prev_block[open_len] + next_block[open_len];
            let prev_block[open_next] = next_block[open_next];
        }
        return;
    }    
    
    function Array find_prev_free(Array object) {
        var Array block;
        if( open_space > object ) {
            return null;
        }
        let block = open_space;
        while( ~(block[open_next] = null) & (block[open_next] < object) ) {
            let block = block[open_next];
        }
        return block;
    }
}