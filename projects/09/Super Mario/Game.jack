	class Game {
		field Character character;
		field Goomba goomba;
		
		constructor Game new() {
			let character = Character.new();
			let goomba = Goomba.new();
			return this;
		}
		
		method void run() {
			var boolean done;
			var int key; // will be 0 by default
			let done = false;
			do draw_scene();
			while (~done) {
				while (key = 0){
					let key = Keyboard.keyPressed();
					do update();
				}
				if (key = 135) {let done = true;}				//end key
				if (key = 32) {do character.jump();} 			//space
				if (key = 132) {do character.move_right();}		// right arrow
				if (key = 130) {do character.move_left();} 		// left arrow
				while (~(key = 0)){
					let key = Keyboard.keyPressed();
					do update();
				}
				if (character.alive() = 0) {
				do Output.moveCursor(7, 29);
				do Output.printString("Game Over");
				let done = true;
				}
			}
			return;
		}

		method void update() {
			if (goomba.alive() = 1) {
				do goomba.update();
			}
			if (character.alive() = 1) {
				do character.update();
			}
			do check_collision();
			do check_win();
			do draw(); 
			do Sys.wait(33);
			return;
		}
		
		method void draw() {
			do draw_const();
			do character.draw();
			do goomba.draw();
			return;
		}
		
		method void dispose() {
			do character.dispose();
			do goomba.dispose();
			do Memory.deAlloc(this);
			return;
		}
		
		method void check_win() {
			var int score;
			if (character.get_x() > 500){
				if (goomba.alive() = 1) {
					do goomba.kill();
				}
				if (goomba.alive() = 0) {
					let score = 100;
				}
				do Output.moveCursor(12, 10);
				do Output.printString("Congrats you won, here was your score:");
				do Output.printInt(character.get_y() * 8);
				do character.kill();
				do dispose();
			}
			return;
		}
		
		method void check_collision(){
			var int min;
			var int max;
			let min = goomba.get_x() - 10;
			let max = goomba.get_x() + 10;
			if (character.get_x() > min & character.get_x() < max){
				if (character.get_y() > goomba.get_y()) {
					do goomba.kill();
				} 
				if (character.get_y() = 50 & character.get_x() = goomba.get_x()) {
					do character.kill();
				}
			}
			return;
		}
		
		method void draw_const() {
			do Screen.drawLine(160, 190, 192, 190);
			do Screen.drawLine(192, 160, 224, 160);
			do Screen.drawLine(224, 128, 256, 128);
			do Screen.drawLine(505, 200, 505, 100);
			do Screen.drawLine(500, 200, 500, 100);
			do Screen.drawCircle(502, 92, 3);
			return;
		}
		
		method void draw_scene() {
			do Screen.drawLine(1, 225, 511, 225);
			do Screen.drawLine(1, 240, 511, 240);
			do draw_cloud_bush(24, 35);
			do draw_cloud_bush(150, 35);
			do draw_cloud_bush(450, 35);
			do draw_cloud_bush(100, 230);
			do draw_cloud_bush(411, 250);
			do draw_cloud_bush(200, 245);
			return;
		}
		
		method void draw_cloud_bush(int x, int y) {
			var int location;
			var int memAddress;
			let location = ( 255 - y*32) + (x/16);
			let memAddress = 16384+location;
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 3120);
			do Memory.poke(memAddress+128, 4680);
			do Memory.poke(memAddress+160, 8580);
			do Memory.poke(memAddress+192, 16388);
			do Memory.poke(memAddress+224, 16386);
			do Memory.poke(memAddress+256, -32671);
			do Memory.poke(memAddress+288, -32622);
			do Memory.poke(memAddress+320, 17548);
			do Memory.poke(memAddress+352, 15104);
			do Memory.poke(memAddress+384, 0);
			do Memory.poke(memAddress+416, 0);
			do Memory.poke(memAddress+448, 0);
			do Memory.poke(memAddress+480, 0);
			return;
		}
	}