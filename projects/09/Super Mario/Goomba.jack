	class Goomba{
		field int x,y;
		field int vx, vy;
		field int alive;
	
		constructor Goomba new() {
			let alive = 1;
			let x = 400;
			let y = 50;
			let vx = 5;
			let vy = 0;
			return this;
		}
		
		method int get_x() {
			return x;
		}
		method int get_y() {
			return y;
		}
		method int alive() {
			return alive;
		}
		method void kill() {
			let alive = 0;
			return;
		}
		
		method void update() {
			do erase();
			if (y < 50) {
				let y = 50; 
			}
			if (x < 380) {
				let x = 380;
				let vx = 5;
			}
			if (x > 450) {
				let x = 450;
				let vx = -5;
			}
			let x = x + vx;
			
			if (vx > 0) {
				if (x > 450) {
					let x = 450;
					let vx = -5;
				}
			}
			if (vx < 0) {
				if (x < 380) {
					let x = 380;
					let vx = 5;
				}
			}
			return;
		}
		
		method void dispose() {
			do Memory.deAlloc(this);
			return;
		}
		
		method void draw() {
			var int location;
			let location = ( 255 - y*32) + (x/16);
			do draw_goomba(location);
			return;
		}
		
		method void draw_goomba(int location) {
			var int memAddress;
			let memAddress = 16384+location;
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 384);
			do Memory.poke(memAddress+128, 576);
			do Memory.poke(memAddress+160, 1056);
			do Memory.poke(memAddress+192, 2064);
			do Memory.poke(memAddress+224, 5736);
			do Memory.poke(memAddress+256, 8196);
			do Memory.poke(memAddress+288, 18402);
			do Memory.poke(memAddress+320, 10836);
			do Memory.poke(memAddress+352, 4104);
			do Memory.poke(memAddress+384, 4080);
			do Memory.poke(memAddress+416, 3120);
			do Memory.poke(memAddress+448, 2064);
			do Memory.poke(memAddress+480, 14364);
			return;
		}
		
		method void erase() {
			var int location;
			var int memAddress; 
			let location = ( 255 - y*32) + (x/16);
			let memAddress = 16384+location;
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 0);
			do Memory.poke(memAddress+128, 0);
			do Memory.poke(memAddress+160, 0);
			do Memory.poke(memAddress+192, 0);
			do Memory.poke(memAddress+224, 0);
			do Memory.poke(memAddress+256, 0);
			do Memory.poke(memAddress+288, 0);
			do Memory.poke(memAddress+320, 0);
			do Memory.poke(memAddress+352, 0);
			do Memory.poke(memAddress+384, 0);
			do Memory.poke(memAddress+416, 0);
			do Memory.poke(memAddress+448, 0);
			do Memory.poke(memAddress+480, 0);
			return;
		}
	}