	class Game {
		field Character character;
		
		constructor Game new() {
			let character = Character.new();
			return this;
		}
		
		method void run() {
			var boolean done;
			var int key; // will be 0 by default
			let done = false;
			do draw_scene();
			while (~done) {
				while (key = 0){
					let key = Keyboard.keyPressed();
					do update();
				}
				if (key = 140) {let done = true;}				//q = quit key, might rebind to sec or something
				if (key = 32) {do character.jump();} 			//space
				if (key = 132) {do character.move_right();}		// right arrow
				if (key = 130) {do character.move_left();} 		// left arrow
				while (~(key = 0)){
					let key = Keyboard.keyPressed();
					do update();
				}
			}
			return;
		}
		
		// can have a list of objects needing to be updated in run(),
		//then just call update on every element of that list or something
		method void update() {
			do character.erase();
			do character.update();
			do draw(); 
			do Sys.wait(33);
			return;
		}
		
		method void draw() {
			do character.draw();
			return;
		}
		
		method void dispose() {
			do character.dispose();
			do Memory.deAlloc(this);
			return;
		}
		
		method void draw_scene() {
			do Screen.drawLine(1, 225, 511, 225);
			do Screen.drawLine(1, 240, 511, 240);
			do draw_cloud_bush(24, 35);
			do draw_cloud_bush(150, 35);
			do draw_cloud_bush(450, 35);
			do draw_cloud_bush(100, 230);
			do draw_cloud_bush(411, 250);
			do draw_cloud_bush(200, 245);
			return;
		}
		
		method void draw_cloud_bush(int x, int y) {
			var int location;
			var int memAddress;
			let location = ( 255 - y*32) + (x/16);
			let memAddress = 16384+location;
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 3120);
			do Memory.poke(memAddress+128, 4680);
			do Memory.poke(memAddress+160, 8580);
			do Memory.poke(memAddress+192, 16388);
			do Memory.poke(memAddress+224, 16386);
			do Memory.poke(memAddress+256, -32671);
			do Memory.poke(memAddress+288, -32622);
			do Memory.poke(memAddress+320, 17548);
			do Memory.poke(memAddress+352, 15104);
			do Memory.poke(memAddress+384, 0);
			do Memory.poke(memAddress+416, 0);
			do Memory.poke(memAddress+448, 0);
			do Memory.poke(memAddress+480, 0);
			return;
		}
		
		method void draw_goomba(int location) {
			var int memAddress;
			let memAddress = 16384+location;
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 384);
			do Memory.poke(memAddress+128, 576);
			do Memory.poke(memAddress+160, 1056);
			do Memory.poke(memAddress+192, 2064);
			do Memory.poke(memAddress+224, 5736);
			do Memory.poke(memAddress+256, 8196);
			do Memory.poke(memAddress+288, 18402);
			do Memory.poke(memAddress+320, 10836);
			do Memory.poke(memAddress+352, 4104);
			do Memory.poke(memAddress+384, 4080);
			do Memory.poke(memAddress+416, 3120);
			do Memory.poke(memAddress+448, 2064);
			do Memory.poke(memAddress+480, 14364);
			return;
		}
	}